//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\WAT\JFK\StringGrammarJFK-master\StringGrammar\StringGrammar.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace StringGrammar {
#pragma warning disable 3021
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class StringGrammarLexer : Lexer {
	public const int
		COMMA=1, OBRACKET=2, CBRACKET=3, CONCANTENATE=4, DIFFERENCE=5, SHIFT_RIGHT=6, 
		SHIFT_LEFT=7, UPPER=8, LOWER=9, SUBSTRING=10, NUMBER=11, DIGIT=12, STRING=13, 
		WS=14;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"COMMA", "OBRACKET", "CBRACKET", "CONCANTENATE", "DIFFERENCE", "SHIFT_RIGHT", 
		"SHIFT_LEFT", "UPPER", "LOWER", "SUBSTRING", "NUMBER", "DIGIT", "STRING", 
		"WS"
	};


	public StringGrammarLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", "'('", "')'", "'+'", "'-'", "'>'", "'<'", "'^'", "'_'", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMA", "OBRACKET", "CBRACKET", "CONCANTENATE", "DIFFERENCE", "SHIFT_RIGHT", 
		"SHIFT_LEFT", "UPPER", "LOWER", "SUBSTRING", "NUMBER", "DIGIT", "STRING", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StringGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x10Q\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b"+
		"\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\a\f\x36\n\f\f\f\xE\f\x39"+
		"\v\f\x3\f\x5\f<\n\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x44\n\xE\f"+
		"\xE\xE\xEG\v\xE\x3\xE\x3\xE\x3\xF\x6\xFL\n\xF\r\xF\xE\xFM\x3\xF\x3\xF"+
		"\x3\x45\x2\x2\x10\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2"+
		"\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10"+
		"\x3\x2\x6\x3\x2\x33;\x3\x2\x32\x32\x3\x2\x32;\x5\x2\v\f\xF\xF\"\"U\x2"+
		"\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2"+
		"\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2"+
		"\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2"+
		"\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x3\x1F\x3\x2\x2\x2\x5!\x3\x2"+
		"\x2\x2\a#\x3\x2\x2\x2\t%\x3\x2\x2\x2\v\'\x3\x2\x2\x2\r)\x3\x2\x2\x2\xF"+
		"+\x3\x2\x2\x2\x11-\x3\x2\x2\x2\x13/\x3\x2\x2\x2\x15\x31\x3\x2\x2\x2\x17"+
		";\x3\x2\x2\x2\x19=\x3\x2\x2\x2\x1B?\x3\x2\x2\x2\x1DK\x3\x2\x2\x2\x1F "+
		"\a.\x2\x2 \x4\x3\x2\x2\x2!\"\a*\x2\x2\"\x6\x3\x2\x2\x2#$\a+\x2\x2$\b\x3"+
		"\x2\x2\x2%&\a-\x2\x2&\n\x3\x2\x2\x2\'(\a/\x2\x2(\f\x3\x2\x2\x2)*\a@\x2"+
		"\x2*\xE\x3\x2\x2\x2+,\a>\x2\x2,\x10\x3\x2\x2\x2-.\a`\x2\x2.\x12\x3\x2"+
		"\x2\x2/\x30\a\x61\x2\x2\x30\x14\x3\x2\x2\x2\x31\x32\a&\x2\x2\x32\x16\x3"+
		"\x2\x2\x2\x33\x37\t\x2\x2\x2\x34\x36\x5\x19\r\x2\x35\x34\x3\x2\x2\x2\x36"+
		"\x39\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38<\x3\x2\x2"+
		"\x2\x39\x37\x3\x2\x2\x2:<\t\x3\x2\x2;\x33\x3\x2\x2\x2;:\x3\x2\x2\x2<\x18"+
		"\x3\x2\x2\x2=>\t\x4\x2\x2>\x1A\x3\x2\x2\x2?\x45\a$\x2\x2@\x41\a^\x2\x2"+
		"\x41\x44\a$\x2\x2\x42\x44\v\x2\x2\x2\x43@\x3\x2\x2\x2\x43\x42\x3\x2\x2"+
		"\x2\x44G\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x46H\x3\x2"+
		"\x2\x2G\x45\x3\x2\x2\x2HI\a$\x2\x2I\x1C\x3\x2\x2\x2JL\t\x5\x2\x2KJ\x3"+
		"\x2\x2\x2LM\x3\x2\x2\x2MK\x3\x2\x2\x2MN\x3\x2\x2\x2NO\x3\x2\x2\x2OP\b"+
		"\xF\x2\x2P\x1E\x3\x2\x2\x2\b\x2\x37;\x43\x45M\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace StringGrammar
